// Button Classes - Professional Button System
// ===========================================
// Enhanced button component classes following golden ratio system

.Button {
    // Base button structure
    position: relative;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: map-get($ComponentSpacing, 'button-gap');
    
    // Typography
    font-family: $FontBody;
    font-weight: map-get($FontWeight, 'medium');
    text-decoration: none;
    text-align: center;
    line-height: map-get($LineHeight, 'tight');
    
    // Interactive states
    border: none;
    cursor: pointer;
    user-select: none;
    overflow: hidden;
    
    // Transitions for professional feel
    transition: map-get($Transition, 'medium');
    
    // Focus management
    &:focus {
        outline: none;
        box-shadow: map-get($BoxShadow, 'focus');
    }
    
    // Disabled state
    &--disabled,
    &:disabled {
        cursor: not-allowed;
        opacity: 0.6;
        pointer-events: none;
    }
    
    // Button Sizes - Golden Ratio Based
    &--small {
        font-size: map-get($UIFontSizes, 'small');
        padding: map-get($ComponentSpacing, 'button-padding-y') * 0.618 map-get($ComponentSpacing, 'button-padding-x') * 0.618;
        border-radius: map-get($BorderRadius, 'sm');
        min-height: 40px;
        min-width: 40px;
    }
    
    &--medium {
        font-size: map-get($UIFontSizes, 'button');
        padding: map-get($ComponentSpacing, 'button-padding-y') map-get($ComponentSpacing, 'button-padding-x');
        border-radius: map-get($BorderRadius, 'md');
        min-height: 44px;
    }
    
    &--large {
        font-size: map-get($UIFontSizes, 'button') * $GoldenRatio;
        padding: map-get($ComponentSpacing, 'button-padding-y') * $GoldenRatio map-get($ComponentSpacing, 'button-padding-x') * $GoldenRatio;
        border-radius: map-get($BorderRadius, 'lg');
        font-weight: map-get($FontWeight, 'semibold');
        min-height: 48px;
    }
    
    // Button Types - Professional Styling
    &--primary {
        background: $ColorCharcoal;
        color: $ColorWhite;
        box-shadow: map-get($BoxShadow, 'subtle');
        position: relative;
        overflow: hidden;
        
        // Golden ratio accent border
        &::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 2px;
            background: linear-gradient(90deg, map-get($AccentColors, 'gold') 0%, transparent 100%);
            opacity: 0.8;
        }
        
        &:hover:not(:disabled) {
            background: lighten($ColorCharcoal, 12%);
            box-shadow: map-get($BoxShadow, 'soft');
            transform: translateY(-2px);
            
            &::before {
                opacity: 1;
                background: linear-gradient(90deg, map-get($AccentColors, 'gold') 0%, map-get($AccentColors, 'gold') 100%);
            }
        }
        
        &:active:not(:disabled) {
            background: darken($ColorCharcoal, 3%);
            transform: translateY(-1px);
            box-shadow: map-get($BoxShadow, 'subtle');
        }
    }
    
    &--secondary {
        background: $ColorConcrete;
        color: $ColorWhite;
        box-shadow: map-get($BoxShadow, 'subtle');
        
        &:hover:not(:disabled) {
            background: lighten($ColorConcrete, 8%);
            box-shadow: map-get($BoxShadow, 'soft');
            transform: translateY(-1px);
        }
        
        &:active:not(:disabled) {
            background: darken($ColorConcrete, 5%);
            transform: translateY(0);
            box-shadow: map-get($BoxShadow, 'subtle');
        }
    }
    
    &--outline {
        background: transparent;
        color: $ColorCharcoal;
        border: map-get($ComponentSpacing, 'border-width') solid $ColorCharcoal;
        
        &:hover:not(:disabled) {
            background: map-get($StateColors, 'hover');
            border-color: darken($ColorCharcoal, 10%);
            transform: translateY(-1px);
            box-shadow: map-get($BoxShadow, 'subtle');
        }
        
        &:active:not(:disabled) {
            background: map-get($StateColors, 'active');
            transform: translateY(0);
        }
    }
    
    &--ghost {
        background: transparent;
        color: $ColorCharcoal;
        
        &:hover:not(:disabled) {
            background: map-get($StateColors, 'hover');
            transform: translateY(-1px);
        }
        
        &:active:not(:disabled) {
            background: map-get($StateColors, 'active');
            transform: translateY(0);
        }
    }
    
    &--subtle {
        background: $ColorCoolGray;
        color: $ColorCharcoal;
        border: none;
        
        &:hover:not(:disabled) {
            background: darken($ColorCoolGray, 5%);
            transform: translateY(-1px);
            box-shadow: map-get($BoxShadow, 'subtle');
        }
        
        &:active:not(:disabled) {
            background: darken($ColorCoolGray, 8%);
            transform: translateY(0);
        }
    }
    
    // Icon-only buttons
    &--icon-only {
        width: auto;
        aspect-ratio: 1;
        padding: map-get($ComponentSpacing, 'button-padding-y');
        
        &.Button--small {
            padding: map-get($ComponentSpacing, 'button-padding-y') * 0.618;
        }
        
        &.Button--large {
            padding: map-get($ComponentSpacing, 'button-padding-y') * $GoldenRatio;
        }
    }
    
    // Legacy simple button compatibility
    display: inline-block;
    padding: map-get($Spacing, 'sm') map-get($Spacing, 'lg');
    border: 1px solid $ColorConcrete;
    border-radius: map-get($BorderRadius, 'none');
    background: $ColorWarmWhite;
    color: $ColorCharcoal;
    font-family: $FontDisplay;
    font-size: map-get($FontSizes, 'body');
    font-weight: map-get($FontWeight, 'medium');
    text-decoration: none;
    text-transform: uppercase;
    letter-spacing: map-get($LetterSpacing, 'wide');
    cursor: pointer;
    transition: map-get($Transition, 'medium');
    
    &:hover {
        background: $ColorConcrete;
        color: $ColorWhite;
        text-decoration: none;
    }
    
    &.Primary {
        background: $ColorCharcoal;
        color: $ColorWhite;
        border-color: $ColorCharcoal;
        
        &:hover {
            background: $ColorConcrete;
            border-color: $ColorConcrete;
        }
    }
    
    &.Secondary {
        background: transparent;
        border-color: $ColorConcreteLight;
        color: $ColorConcrete;
        
        &:hover {
            background: $ColorConcreteLight;
            color: $ColorCharcoal;
        }
    }
}

// Icon positioning
.Button__Icon {
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
    width: map-get($Scale, 'lg');
    height: map-get($Scale, 'lg');
    
    &--left {
        margin-right: map-get($Scale, 'xs');
    }
    
    &--right {
        margin-left: map-get($Scale, 'xs');
    }
}

.Button__Text {
    flex: 1;
}

// Button groups
.Button-Group {
    display: flex;
    gap: map-get($ComponentSpacing, 'button-gap');
    
    &--stack {
        flex-direction: column;
    }
    
    &--attached {
        gap: 0;
        
        .Button {
            border-radius: 0;
            
            &:first-child {
                border-top-left-radius: map-get($BorderRadius, 'md');
                border-bottom-left-radius: map-get($BorderRadius, 'md');
            }
            
            &:last-child {
                border-top-right-radius: map-get($BorderRadius, 'md');
                border-bottom-right-radius: map-get($BorderRadius, 'md');
            }
        }
    }
}